{"version":3,"sources":["components/NewsLetter.js","App.js","serviceWorker.js","index.js"],"names":["NewsLetter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClose","setState","show","handleShow","onChange","e","defineProperty","target","name","value","onSubmit","preventDefault","email","alert","state","react_default","a","createElement","Fragment","Col","xs","className","Button","variant","onClick","Modal","onHide","centered","size","animation","Header","closeButton","Body","Form","sm","span","offset","Group","FormControl","type","placeholder","required","controlId","Check","label","Component","App","NewsLetter_NewsLetter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTAGqBA,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQRQ,YAAc,WACZP,EAAKQ,SAAS,CAAEC,MAAM,KAVLT,EAanBU,WAAa,WACXV,EAAKQ,SAAS,CAAEC,MAAM,KAdLT,EAiBnBW,SAAW,SAAAC,GACTZ,EAAKQ,SAALP,OAAAY,EAAA,EAAAZ,CAAA,GACGW,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SAnBXhB,EAuBnBiB,SAAW,SAAAL,GACTA,EAAEM,iBAEFlB,EAAKQ,SAAS,CACZW,MAAO,KAETC,MAAM,4BA1BNpB,EAAKqB,MAAQ,CACXZ,MAAM,EACNU,MAAO,IALQnB,wEAiCjB,OACEsB,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,GAAI,GAAIC,UAAU,yBACrBN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS5B,KAAKO,YAAxC,sBAKFY,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACEvB,KAAMN,KAAKkB,MAAMZ,KACjBwB,OAAQ9B,KAAKI,YACb2B,UAAQ,EACRC,KAAK,KACLC,WAAW,GAEXd,EAAAC,EAAAC,cAACQ,EAAA,EAAMK,OAAP,CAAcC,aAAW,IACzBhB,EAAAC,EAAAC,cAACQ,EAAA,EAAMO,KAAP,CAAYX,UAAU,eACpBN,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAMvB,SAAUd,KAAKc,UACnBK,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,GAAI,IACPL,EAAAC,EAAAC,cAAA,MAAII,UAAU,WAAd,wBACAN,EAAAC,EAAAC,cAAA,KAAGI,UAAU,WAAb,wHAIAN,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,GAAI,GAAIc,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IAClCrB,EAAAC,EAAAC,cAACgB,EAAA,EAAKI,MAAN,KACEtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CACEC,KAAK,QACLC,YAAY,QACZhC,KAAK,QACLC,MAAOb,KAAKkB,MAAMF,MAClBR,SAAUR,KAAKQ,SACfqC,UAAQ,MAId1B,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,GAAI,IACPL,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQC,QAAQ,UAAUgB,KAAK,UAA/B,WAIFxB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,GAAI,IACPL,EAAAC,EAAAC,cAACgB,EAAA,EAAKI,MAAN,CAAYK,UAAU,mBAAmBrB,UAAU,YACjDN,EAAAC,EAAAC,cAACgB,EAAA,EAAKU,MAAN,CACEJ,KAAK,WACLK,MAAM,8CA/EYC,aCWzBC,0LARX,OACE/B,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAAC8B,EAAD,cAJUF,cCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.728253cc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Modal, Button, Col, FormControl, Form } from \"react-bootstrap\";\n\nexport default class NewsLetter extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      show: false,\n      email: \"\"\n    };\n  }\n\n  handleClose = () => {\n    this.setState({ show: false });\n  };\n\n  handleShow = () => {\n    this.setState({ show: true });\n  };\n\n  onChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n\n    this.setState({\n      email: \"\"\n    });\n    alert(\"Successfuly submitted!!\");\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <Col xs={12} className=\"text-center btn-modal\">\n          <Button variant=\"primary\" onClick={this.handleShow}>\n            Launch demo modal\n          </Button>\n        </Col>\n\n        <Modal\n          show={this.state.show}\n          onHide={this.handleClose}\n          centered\n          size=\"lg\"\n          animation={false}\n        >\n          <Modal.Header closeButton />\n          <Modal.Body className=\"text-center\">\n            <Form onSubmit={this.onSubmit}>\n              <Col xs={12}>\n                <h2 className=\"heading\">SIGNUP & GET 10% OFF</h2>\n                <p className=\"message\">\n                  Subscribe to our newsletters now and stay up-to-date with new\n                  colletions, the latest lookbooks and exclusive offers.\n                </p>\n                <Col xs={12} sm={{ span: 8, offset: 2 }}>\n                  <Form.Group>\n                    <FormControl\n                      type=\"email\"\n                      placeholder=\"Email\"\n                      name=\"email\"\n                      value={this.state.email}\n                      onChange={this.onChange}\n                      required\n                    />\n                  </Form.Group>\n                </Col>\n                <Col xs={12}>\n                  <Button variant=\"primary\" type=\"submit\">\n                    SUBMIT\n                  </Button>\n                </Col>\n                <Col xs={12}>\n                  <Form.Group controlId=\"formBasicChecbox\" className=\"checkbox\">\n                    <Form.Check\n                      type=\"checkbox\"\n                      label=\"Don't show this popup again\"\n                    />\n                  </Form.Group>\n                </Col>\n              </Col>\n            </Form>\n          </Modal.Body>\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { NewsLetter } from \"./components\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <NewsLetter />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}